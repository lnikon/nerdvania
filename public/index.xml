<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>little big bytes</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on little big bytes</description>
    <generator>Hugo -- 0.131.0</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Aug 2024 00:32:37 +0400</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Benchmarking basic IO functions on Linux</title>
      <link>http://localhost:1313/posts/benchmarking_basic_io_functions_on_linux/</link>
      <pubDate>Tue, 20 Aug 2024 00:32:37 +0400</pubDate>
      <guid>http://localhost:1313/posts/benchmarking_basic_io_functions_on_linux/</guid>
      <description>Hi there!
I am working on a database, particularly building the storage engine(https://github.com/lnikon/tinykvpp) right now, and I assigned myself the task of creating separate file abstractions(e.g. I really like how it is done in leveldb, thus having RandomAccessFile, SequentialFile, AppendOnlyFile, etc&amp;hellip;).
So, while designing my approach to this, I started evaluating my current way of doing file IO - fstreams versus plain POSIX write(), and simple Google benchmark:
static void BM_BenchmarkFstreamWrite(benchmark::State &amp;amp; state) { const std::string filename(&amp;#34;test_stream.</description>
    </item>
  </channel>
</rss>
